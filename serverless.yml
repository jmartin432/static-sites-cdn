service: static-site-cdn

frameworkVersion: ">=1.9.0 <2.0.0"

custom:
  stage: ${opt:stage, self:provider.stage}
  rootDomain: "justinlmartin.com"
  s3BaseUrl: "s3-website-us-west-2.amazonaws.com"

provider:
  name: aws
  region: us-west-2
  runtime: nodejs10.x
  environment:
  iamRoleStatements:

resources:
  Resources:
    staticSiteCdnS3:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: static-site-cdn-${self:custom.stage}-${file(secrets.yml):${self:custom.stage}.accountNumber}
        WebsiteConfiguration:
          ErrorDocument: index.html
          IndexDocument: error.html
    staticSiteCdnDnsRecords:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneName: ${self:custom.rootDomain}.
        Comment: "DNS records associated with Sunrise Sunset App"
        RecordSets: ${file(dnsRecords.yml):${self:custom.stage}.static-site-cdn}
    staticSiteCdnCdn:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            AcmCertificateArn: ${file(secrets.yml):${self:custom.stage}.sslCert}
            SslSupportMethod: sni-only
          Enabled: true
          HttpVersion: http2
          Aliases: ${file(aliases.yml):${self:custom.stage}.static-site-cdn}
          DefaultRootObject: index.html
          Origins:
            - DomainName: {"Fn::Join": ["", [{Ref: staticSiteCdnS3}, ".s3-website-us-west-2.amazonaws.com"]]}
              Id: S3Origin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          DefaultCacheBehavior:
            ViewerProtocolPolicy: allow-all
            TargetOriginId: S3Origin
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 30
            MinTTL: 10
            ForwardedValues:
              QueryString: true
  Outputs:
    staticSiteCdnS3Url:
      Value: {Fn::GetAtt: [staticSiteCdnS3, WebsiteURL]}
    staticSiteCdnS3Bucket:
      Value: {Ref: staticSiteCdnS3}

package:
  exclude:
  include:

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
